@model  FileCloud.Models.FileModel
@{
    ViewBag.Title = "Index";
}
@{if (Model.fileID == 0) { Model.fileID = Int32.Parse(Session["LogedUserID"].ToString()); }
}
<ul class="collapsible popout" id="dropzonehead"data-collapsible="expandable">
    <li>
        <div class="collapsible-header" style="text-align:center;border:1px solid blue;border-radius:1px">Click To Open Dropzone</div>
        <div class="collapsible-body">


            <div class="jumbotron">
                <form action="~/UserPage/SaveUploadedFile/@Session["LogedUserID"]" method="post" enctype="multipart/form-data" class="dropzone" id="dropzoneForm" style="width:100%; background: none; border:1px solid #bbdefb;">
                    <i class="large material-icons">present_to_all</i>

                    <div class="fallback">

                        <input name="file" type="file" multiple />
                        <input type="submit" value="Upload" />
                    </div>
                </form>
            </div>
        </div>
    </li>
</ul>


<style type="text/css">
    .dz-max-files-reached {
        background-color: red;
    }
</style>

<div class="card-panel grey lighten-5 z-depth-1">

    <img src="~/Content/img/avatar1.png" style="margin-left:2%;background-color:floralwhite" class="circle responsive-img"> <!-- notice the "circle" class -->

    <div style="max-height:20px;text-align:center">
        <i class="black-text" style="margin-left:2.5%">
            @Session["LogedUser"] Current Folder Is : @Model.filename ; Size : @Model.getSize();
        </i>

    </div>

</div>

<div class="fixed-action-btn click-to-toggle" style="bottom: 45px; right: 24px;">
    <a class="btn-floating btn-large red">
        <i class="material-icons">menu</i>
    </a>
    <ul>

        <li><a href="#modal1" class="btn-floating tooltipped red model-trigger" data-position="left" data-delay="50" data-tooltip="CreateFolder"><i class="material-icons">add</i></a></li>
        <li><a class="btn-floating tooltipped orange" data-position="left" data-delay="50" data-tooltip="Edit"><i class="material-icons">mode_edit</i></a></li>
        <li><a class="btn-floating tooltipped green" data-position="left" data-delay="50" data-tooltip="Remove"><i class="material-icons">delete</i></a></li>
        <li><a href="#dropzonehead" class="btn-floating tooltipped blue" data-position="left" data-delay="50" data-tooltip="Dropzone"><i class="material-icons">present_to_all</i></a></li>
    </ul>
</div>
 <!-- Modal Structure -->
<div id="modal1" class="modal">
    <div class="modal-content">
        <h4>Modal Header</h4>
        <p>A bunch of text</p>
    </div>
    <div class="modal-footer">
        <a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat">Agree</a>
    </div>
</div>



<div style="width:100%;height:600px;overflow-y:scroll;">
    
<table class="striped fixed-header">
    <thead>
        <tr>
            <th data-field="icon"></th>
            <th><a href="#!">FileName</a></th>
            <th><a href="#!">Last Modify</a></th>
            <th><a href="#!">Size</a></th>
            <th><a class="btn-floating tooltipped green" id="select" data-position="left" data-delay="50" data-tooltip="Select"><i class="material-icons">view_list</i></a></th>
        </tr>


    </thead>
    <tbody id="file_table" style="height: 100px;overflow-y: auto">

        @{int i = 0; while (i < Model.listSize())
            {
                <tr>
                    @if (Model.GetChild(i).isDirectory)
                    {


                        <td><i class="small material-icons ">folder</i></td>
                            <td style="color:blue">@Model.GetChild(i).filename</td>



                    }
                    else
                    {
                        <td><i class="small material-icons ">launch</i></td>
                            <td style="color:green">@Model.GetChild(i).filename</td>
                    }
                    <td>@Model.GetChild(i).modifydate</td>
                    @{if (!Model.GetChild(i).isDirectory)
                        {
                            <td>@Model.GetChild(i).getSize()</td>}
                        else {
                            <td>@Model.GetChild(i).ConvertSize(Model.GetChild(i).size)</td>}
                    }
                    <td><p style="visibility:hidden"><input type="checkbox" id="@i" /><label style=" margin-left 10px;" for="@i"></label></p></td>
                </tr>
                            i++;
                        }
        }
        <tr></tr>
    </tbody>
</table>
    </div>










<script>

    $(document).ready(function () {

        //$("p").css('visibility','hidden');
    });
    $("#select").click(function () {


        if ($("p").css('visibility') == 'visible')
            $("p").css('visibility', 'hidden');
        else
            $("p").css('visibility', 'visible');



    });


</script>

<script type="text/javascript">
    $(function () {
        $("#create_folder").click(function () {

            $.ajax({
                type: "GET",
                url: '@Url.Action("CreateNewFolder","UserPage")',
                data: {

                    fileID: '@Model.fileID'
                },

                error: function (response) {
                    //alert(response);
                },
                success: function (response) {
                    alert(response);
                }
            });
        });
    })
</script>

<script type="text/javascript">

    //File Upload response from the server
    Dropzone.options.dropzoneForm = {
        maxFiles: 20,
        init: function () {
            this.on("maxfilesexceeded", function (data) {
                var res = eval('(' + data.xhr.responseText + ')');

            });
            this.on("addedfile", function (file) {

                // Create the remove button
                var removeButton = Dropzone.createElement("<button>Remove file</button>");


                // Capture the Dropzone instance as closure.
                var _this = this;

                // Listen to the click event
                removeButton.addEventListener("click", function (e) {
                    // Make sure the button click doesn't submit the form:
                    e.preventDefault();
                    e.stopPropagation();
                    // Remove the file preview.
                    _this.removeFile(file);
                    // If you want to the delete the file on the server as well,
                    // you can do the AJAX request here.
                });

                // Add the button to the file preview element.
                file.previewElement.appendChild(removeButton);
            });
        }
    };

</script>

<script>
    $(document).ready(function () {
        $('.collapsible').collapsible({
            accordion: false // A setting that changes the collapsible behavior to expandable instead of the default accordion style
        });
    });


</script>

<script>
    $(document).ready(function () {
        // the "href" attribute of .modal-trigger must specify the modal ID that wants to be triggered
        $('.modal-trigger').leanModal();
    });


</script> 

